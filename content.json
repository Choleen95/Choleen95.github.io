{"pages":[{"title":"","text":"关于我大家好，我是山沉，这是我建的第一个博客。现在是java+微服务路上的行者，希望我们共同上路，一路前行。 我的站点 博客园：山沉 CSDN：山沉 思否：山沉 掘金：山沉","link":"/about/index.html"},{"title":"categories","text":"","link":"/categories/index.html"}],"posts":[{"title":"ie6/ie7的网页问题","text":"2020年3月13日工作问题问题：在jsp页面，下有js文件没有加载出来，但是在f12下，刷新就加载出来了。 &lt;!--more--&gt; 我打开的网页是360安全浏览器，内核设置为ie8，但是打开网页有一些js文件就是加载不出来，后来查询 得知。在ie8/9模式下，只能打开f12生效console方法。在ie6/7，根本没有这个方法。 解决： 1.直接一点，删除就可以了 2.用代码解决 if(window.console){ //一些console命令 console.info(&quot;gogo&quot;)； }这次的问题发生了，及时的解决，才能更好的锻炼自己。","link":"/2020/03/07/313-ie/"},{"title":"Postgresql导出数据字典","text":"这是在工作中，有时会遇到的问题，要求完善数据字典。这里是python导出Postgresql表的字典，仅供参考。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161import psycopg2import xlwtfrom datetime import datetimeimport os def getData(): conn = psycopg2.connect(database='数据库名', user='postgres', password='密码', host='127.0.0.1', port=5432) cur = conn.cursor() query = ''' SELECT d.relname AS relname, obj_description ( relfilenode, 'pg_class' ) AS tablename, attname AS field,CASE typname WHEN '_bpchar' THEN 'char' WHEN '_varchar' THEN 'varchar' WHEN '_date' THEN 'date' WHEN '_float8' THEN 'float8' WHEN '_int4' THEN 'int4' WHEN '_int8' THEN 'int8' WHEN '_interval' THEN 'interval' WHEN '_numeric' THEN 'numeric' WHEN '_float4' THEN 'float4' WHEN '_int2' THEN 'smallint' WHEN '_text' THEN 'text' WHEN '_time' THEN 'time' WHEN '_timestamp' THEN 'timestamp' WHEN '_timestamptz' THEN 'timestamptz' END AS TYPE, CASE typname WHEN '_bpchar' THEN atttypmod - 4 WHEN '_varchar' THEN atttypmod - 4 WHEN '_numeric' THEN ( atttypmod - 4 ) / 65536 ELSE attlen END AS LENGTH, CASE typname WHEN '_numeric' THEN ( atttypmod - 4 ) % 65536 ELSE 0 END AS xs,CASE WHEN b.attnotnull = 't' THEN '不能为空' ELSE'' END AS NOTNULL,CASE WHEN ( SELECT COUNT ( * ) FROM pg_constraint WHERE conrelid = b.attrelid AND conkey [ 1 ]= attnum AND contype = 'p' ) &gt; 0 THEN '主键' ELSE'' END AS zj ,col_description ( b.attrelid, b.attnum ) AS COMMENTFROM pg_stat_user_tables AS A, pg_class AS d, pg_tables AS P, pg_attribute AS b, pg_type AS CWHERE A.relid = b.attrelid AND b.attnum &gt; 0 AND b.atttypid = C.typelem AND substr( typname, 1, 1 ) = '_' AND P.tablename = d.relname AND d.relname = A.relname AND A.relname NOT LIKE'c%' AND A.relname NOT LIKE'S%'ORDER BY A.schemaname, A.relname,attnum ''' cur.execute(query) data = cur.fetchall() conn.commit() cur.close() conn.close() return data def queryDataToExcel(name): data = getData() myExcel = xlwt.Workbook('encoding=utf-8') # 查询二原数据采集量 sheet1 = myExcel.add_sheet(name, cell_overwrite_ok=True) sheet1.col(0).width = 150 * 20 sheet1.col(1).width = 150 * 20 sheet1.col(2).width = 150 * 20 sheet1.col(3).width = 150 * 20 sheet1.col(4).width = 150 * 20 sheet1.col(5).width = 150 * 20 sheet1.col(6).width = 150 * 20 sheet1.col(7).width = 150 * 20 sheet1.col(8).width = 150 * 20 sheet1.col(8).width = 350 * 20 #设置居中 a1 = xlwt.Alignment() a1.horz = 0x02 a1.vert = 0x01 style = xlwt.XFStyle() # 赋值style为XFStyle为初始化样式 style.alignment = a1 today = datetime.today() # 获取当前日期，得到一个datetime对象如：(2019, 7, 2, 23, 12, 23, 424000) today_date = datetime.date(today) # 将获取到的datetime对象仅取日期如：2019-7-2 items = ['数据表', '表名', '字段', '类型', '长度', '小数点', '是否为空', '是否为主键', '注释'] for col in range(len(items)): sheet1.write(0, col, items[col]) # 从data获取第一列数据，[(&quot;xxx&quot;,&quot;xxx&quot;),()] first_col = [] for i in range(len(data)): first_col.append(data[i][0]) print(&quot;first_col:&quot;, first_col) # 去掉重复的列数据，并顺序不变 nFirst_col = list(set(first_col)) nFirst_col.sort(key=first_col.index) print(&quot;nFirst_col:&quot;, nFirst_col) row = 1 for i in nFirst_col: count = first_col.count(i) # 计算重复的元素个数 mergeRow = row + count - 1 # 合并后的上行数， sheet1.write_merge(row, mergeRow, 0, 0, i, style) # 第一列 sheet1.write_merge(row, mergeRow, 1, 1, i, style) row = mergeRow + 1 # 从下一行开始写入 # 获取data[i]中的第二个元素，循环写入 for row in range(len(data)): for col in range(1, len(data[row])): sheet1.write(row + 1, col, data[row][col], style) fileName = name + '_' + str(today_date) + '.xls' rootPath = os.path.dirname(os.path.abspath(_file_))+'\\\\' print(rootPath) flag = os.path.exists(rootPath+fileName) if flag: os.remove(rootPath+fileName) myExcel.save(fileName) else: myExcel.save(fileName) # 以传递的name+当前日期作为excel名称保存 if __name__ == '__main__': print(&quot;这是从postgresql中导出excel的demo----&quot;) queryDataToExcel(&quot;数据表&quot;) 这里我用的是xlwt，没用openpyxl操作","link":"/2020/03/07/ExportTable/"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"/2020/03/06/hello-world/"},{"title":"hexo+icarus搭建的第一个博客","text":"博客的搭建过程中，才发现自己会的东西挺少。今后会继续学习，持之以恒，参考了的一些资料，总算搭建了一个hexo+icarus实现的博客。 所需内容 github账户一个 nodejs安装(之后在安装hexo等) git for windows0.申请一个github账户注册账户，完成之后生成一个GitHub的 ID.github.io的仓库。这个在之后上传静态资源，可以作为默认网址访问博客。1.nodejs安装这里不过多的叙述，或者在网上找资料，普通的安装。2.hexo+icarus搭建博客&emsp;这里推荐小明同学的博客，丰富的记录了hexo搭建博客的所需事项。当时域名的绑定与配置没有搞清楚，后来配置域名时，才知道在国内注册的域名要备案，后来又去备案，结果没有备案，照下面这样做，也能访问。(最好备案，各个网站的app备案更快.)3.配置华为云域名 在项目的source目录下建一个没有后缀的文件-CNAME，里面写入www.xxx.xx你的域名。123hexo cleanhexo generatehexo deploy 只要过2到3分中即可用域名访问了。OK！","link":"/2020/03/07/hexo%E6%90%AD%E5%BB%BA%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2/"},{"title":"nodejs启动服务失败","text":"nodejs启动服务过程中难免遇到一些问题，此次我就遇到了node-sass安装后环境发生变化的问题。 1.第一次提示This usually happens because your environment has changed since running npm install百度说是node-sass安装后环境发生变化。需要重新编译或安装node-sass 解决 1.在项目根路径打开管理员模式的cmd 2 npm rebuild node-sass 2.1 提示Cannot download “https://github.com/sass/node-sass/releases/download/v4.13.1/win32-x64-72_binding.node&quot;: 3.设置淘宝下载 npm i node-sass --sass_binary_site=https://npm.taobao.org/mirrors/node-sass/ ok,启动node服务成功","link":"/2020/03/07/nodejs/"}],"tags":[{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"nodeJs","slug":"nodeJs","link":"/tags/nodeJs/"}],"categories":[{"name":"WEB","slug":"WEB","link":"/categories/WEB/"},{"name":"Python","slug":"Python","link":"/categories/Python/"},{"name":"人生","slug":"人生","link":"/categories/%E4%BA%BA%E7%94%9F/"},{"name":"前端","slug":"前端","link":"/categories/%E5%89%8D%E7%AB%AF/"}]}